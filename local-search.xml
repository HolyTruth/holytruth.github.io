<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Exercise 1</title>
    <link href="/post/exercise-1-zsw2fk.html"/>
    <url>/post/exercise-1-zsw2fk.html</url>
    
    <content type="html"><![CDATA[<h1 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h1><p>目标：<span style="font-weight: bold;" data-type="strong"><a href="https://www.cvedetails.com/cve/CVE-2019-13288/">CVE-2019-13288</a></span> in XPDF 3.02</p><p>工具：AFL（虽然文中要求是AFL++）</p><p>‍</p><p>‍</p><h1 id="XPDF下载与编译"><a href="#XPDF下载与编译" class="headerlink" title="XPDF下载与编译"></a>XPDF下载与编译</h1><p>官网：<a href="https://www.xpdfreader.com/old-versions.html">https://www.xpdfreader.com/old-versions.html</a></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --prefix=<span class="hljs-string">&quot;/work/Fuzzing101/Exercise_1/install/&quot;</span><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@TruthClient:/work/Fuzzing101/Exercise_1/xpdf-3.02<span class="hljs-comment"># /work/Fuzzing101/Exercise_1/install/bin/pdfinfo /work/Fuzzing101/Exercise_1/pdf_example/helloworld.pdf </span><br>Tagged:         no<br>Pages:          1<br>Encrypted:      no<br>Page size:      200 x 200 pts<br>File size:      678 bytes<br>Optimized:      no<br>PDF version:    1.7<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="使用AFL编译"><a href="#使用AFL编译" class="headerlink" title="使用AFL编译"></a>使用AFL编译</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">CC=/code/AFL/afl-clang CXX=/code/AFL/afl-clang++ ./configure --prefix=<span class="hljs-string">&quot;/work/Fuzzing101/Exercise_1/install/&quot;</span><br>make<br>make install<br></code></pre></td></tr></table></figure><h1 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">afl-fuzz -i /work/Fuzzing101/Exercise_1/pdf_example/ -o /work/Fuzzing101/Exercise_1/out/ -- /work/Fuzzing101/Exercise_1/install/bin/pdftotext @@ /work/Fuzzing101/Exercise_1/output<br></code></pre></td></tr></table></figure><p>​<code>-s 123</code>​是AFL++中设置随机种子功能，AFL没有该功能</p><p>‍</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><h2 id="crash"><a href="#crash" class="headerlink" title="crash"></a>crash</h2><p>跑出一个crash后就把fuzz停住了，毕竟是拿来练手的程序，应该不会有其他洞了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>                      american fuzzy lop 2.57b (pdftotext)<br><br>┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐<br>│        run time : 0 days, 0 hrs, 22 min, 27 sec      │  cycles <span class="hljs-keyword">done</span> : 0      │<br>│   last new path : 0 days, 0 hrs, 2 min, 34 sec       │  total paths : 1962   │<br>│ last <span class="hljs-built_in">uniq</span> crash : 0 days, 0 hrs, 18 min, 30 sec      │ <span class="hljs-built_in">uniq</span> crashes : 1      │<br>│  last <span class="hljs-built_in">uniq</span> hang : none seen yet                      │   <span class="hljs-built_in">uniq</span> hangs : 0      │<br>├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤<br>│  now processing : 75* (3.82%)       │    map density : 3.52% / 8.18%         │<br>│ paths timed out : 0 (0.00%)         │ count coverage : 3.87 bits/tuple       │<br>├─ stage progress ────────────────────┼─ findings <span class="hljs-keyword">in</span> depth ────────────────────┤<br>│  now trying : arith 8/8             │ favored paths : 322 (16.41%)           │<br>│ stage execs : 16.1k/41.9k (38.58%)  │  new edges on : 494 (25.18%)           │<br>│ total execs : 1.49M                 │ total crashes : 1 (1 unique)           │<br>│  <span class="hljs-built_in">exec</span> speed : 1144/sec              │  total tmouts : 1 (1 unique)           │<br>├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤<br>│   bit flips : 630/90.3k, 141/90.3k, 113/90.3k       │    levels : 3          │<br>│  byte flips : 5/11.3k, 18/6366, 18/6386             │   pending : 1951       │<br>│ arithmetics : 260/316k, 21/33.0k, 0/0               │  pend fav : 314        │<br>│  known ints : 22/28.9k, 69/157k, 83/252k            │ own finds : 1960       │<br>│  dictionary : 0/0, 0/0, 149/273k                    │  imported : n/a        │<br>│       havoc : 432/92.3k, 0/0                        │ stability : 100.00%    │<br>│        trim : 0.64%/5522, 43.57%                    ├────────────────────────┘<br>└─────────────────────────────────────────────────────┘          [cpu000: 79%]<br><br></code></pre></td></tr></table></figure><h2 id="out目录分析"><a href="#out目录分析" class="headerlink" title="out目录分析"></a>out目录分析</h2><p>在存放fuzz结果的目录<code>/work/Fuzzing101/Exercise_1/out</code>​结构如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@TruthClient:/work/Fuzzing101/Exercise_1/out<span class="hljs-comment"># tree</span><br>.<br>├── crashes<span class="hljs-comment"># 存放使程序crash的样例</span><br>│   ├── <span class="hljs-built_in">id</span>:000000,sig:11,src:000001,op:flip4,pos:799<br>│   └── README.txt<span class="hljs-comment"># fuzz的命令和一些tips</span><br>├── fuzz_bitmap<br>├── fuzzer_stats<span class="hljs-comment"># fuzzer的状态</span><br>├── hangs<br>├── plot_data<span class="hljs-comment"># 用于图像显示</span><br>└── queue<span class="hljs-comment"># fuzz的样例队列</span><br>    ├── <span class="hljs-built_in">id</span>:000000,orig:helloworld.pdf<br>    ├── <span class="hljs-built_in">id</span>:000001,orig:small-example-pdf-file.pdf<br>    ├── <span class="hljs-built_in">id</span>:000002,src:000000,op:flip1,pos:0,+cov<br>    ├── <span class="hljs-built_in">id</span>:000003,src:000000,op:flip1,pos:5,+cov<br>├──...<br></code></pre></td></tr></table></figure><h2 id="crash复现分析"><a href="#crash复现分析" class="headerlink" title="crash复现分析"></a>crash复现分析</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@TruthClient:/work/Fuzzing101/Exercise_1<span class="hljs-comment"># /work/Fuzzing101/Exercise_1/install/bin/pdftotext ./out/crashes/id\:000000\,sig\:11\,src\:000001\,op\:flip4\,pos\:799</span><br>Segmentation fault<br></code></pre></td></tr></table></figure><p>虽然也是崩溃了，但是报错信息不如文中那么多，不知道问题出在哪。。。</p><p>需要GDB调试确定。</p><h3 id="重新编译以获取符号堆栈跟踪"><a href="#重新编译以获取符号堆栈跟踪" class="headerlink" title="重新编译以获取符号堆栈跟踪"></a>重新编译以获取符号堆栈跟踪</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /work/Fuzzing101/Exercise_1/xpdf-3.02<br>make clean<br>CFLAGS=<span class="hljs-string">&quot;-g -O0&quot;</span> CXXFLAGS=<span class="hljs-string">&quot;-g -O0&quot;</span> ./configure --prefix=<span class="hljs-string">&quot;/work/Fuzzing101/Exercise_1/install/&quot;</span><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@TruthClient:/work/Fuzzing101/Exercise_1<span class="hljs-comment"># gdb ./install/bin/pdftotext -q</span><br>pwndbg: loaded 154 pwndbg commands and 46 shell commands. Type pwndbg [--shell | --all] [filter] <span class="hljs-keyword">for</span> a list.<br>pwndbg: created <span class="hljs-variable">$rebase</span>, <span class="hljs-variable">$ida</span> GDB <span class="hljs-built_in">functions</span> (can be used with <span class="hljs-built_in">print</span>/break)<br>Reading symbols from ./install/bin/pdftotext...<br>------- tip of the day (<span class="hljs-built_in">disable</span> with <span class="hljs-built_in">set</span> show-tips off) -------<br>Pwndbg context displays <span class="hljs-built_in">where</span> the program branches to thanks to emulating few instructions into the future. You can <span class="hljs-built_in">disable</span> this with <span class="hljs-built_in">set</span> <span class="hljs-built_in">emulate</span> off <span class="hljs-built_in">which</span> may also speed up debugging<br>pwndbg&gt; <span class="hljs-built_in">set</span> args /work/Fuzzing101/Exercise_1/out/crashes/id:000000,sig:11,src:000001,op:flip4,pos:799 /work/Fuzzing101/Exercise_1/output <br>pwndbg&gt; r<br>Starting program: /work/Fuzzing101/Exercise_1/install/bin/pdftotext /work/Fuzzing101/Exercise_1/out/crashes/id:000000,sig:11,src:000001,op:flip4,pos:799 /work/Fuzzing101/Exercise_1/output <br><br>Program received signal SIGSEGV, Segmentation fault.<br>0x00007f561fe49eb1 <span class="hljs-keyword">in</span> _int_malloc (av=av@entry=0x7f561ff9eb80 &lt;main_arena&gt;, bytes=bytes@entry=344) at malloc.c:3718<br>3718    malloc.c: No such file or directory.<br>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br>────────────────────────────────────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]────────────────────────────────────────────────────────────────────────────────<br> RAX  0x0<br>*RBX  0x7f561ff9eb80 (main_arena) ◂— 0x0<br>*RCX  0x7f561ff9ed30 (main_arena+432) —▸ 0x7f561ff9ed20 (main_arena+416) —▸ 0x7f561ff9ed10 (main_arena+400) —▸ 0x7f561ff9ed00 (main_arena+384) —▸ 0x7f561ff9ecf0 (main_arena+368) ◂— ...<br> RDX  0x0<br>*RDI  0x5b<br>*RSI  0x158<br>*R8   0x7f561ff9ed30 (main_arena+432) —▸ 0x7f561ff9ed20 (main_arena+416) —▸ 0x7f561ff9ed10 (main_arena+400) —▸ 0x7f561ff9ed00 (main_arena+384) —▸ 0x7f561ff9ecf0 (main_arena+368) ◂— ...<br>*R9   0x562e57072ca2 (FileStream::makeSubStream(unsigned int, int, unsigned int, Object*)) ◂— endbr64 <br>*R10  0x562e59b99000 —▸ 0x562e59b98f70 ◂— 0x6874676e654c /* <span class="hljs-string">&#x27;Length&#x27;</span> */<br>*R11  0x7f561ff9ebe0 (main_arena+96) —▸ 0x562e59bb4ca0 ◂— 0x0<br>*R12  0xffffffffffffff90<br>*R13  0x160<br>*R14  0x16<br>*R15  0x14<br>*RBP  0x158<br>*RSP  0x7ffffce01fe0<br>*RIP  0x7f561fe49eb1 (_int_malloc+1089) ◂— mov qword ptr [rsp + 8], rax<br>─────────────────────────────────────────────────────────────────────────────────────────[ DISASM / x86-64 / <span class="hljs-built_in">set</span> <span class="hljs-built_in">emulate</span> on ]─────────────────────────────────────────────────────────────────────────────────────────<br> ► 0x7f561fe49eb1 &lt;_int_malloc+1089&gt;    mov    qword ptr [rsp + 8], rax<br>   0x7f561fe49eb6 &lt;_int_malloc+1094&gt;    cmp    qword ptr fs:[r12], 0<br>   0x7f561fe49ebc &lt;_int_malloc+1100&gt;    je     _int_malloc+1118                &lt;_int_malloc+1118&gt;<br>    ↓<br>   0x7f561fe49ece &lt;_int_malloc+1118&gt;    mov    qword ptr [rsp], 0<br>   0x7f561fe49ed6 &lt;_int_malloc+1126&gt;    lea    r11, [rbx + 0x60]<br>   0x7f561fe49eda &lt;_int_malloc+1130&gt;    mov    qword ptr [rsp + 0x20], rbp<br>   0x7f561fe49edf &lt;_int_malloc+1135&gt;    mov    dword ptr [rsp + 0x48], r14d<br>   0x7f561fe49ee4 &lt;_int_malloc+1140&gt;    mov    r14, r12<br>   0x7f561fe49ee7 &lt;_int_malloc+1143&gt;    mov    rsi, qword ptr [rbx + 0x78]<br>   0x7f561fe49eeb &lt;_int_malloc+1147&gt;    cmp    rsi, r11<br>   0x7f561fe49eee &lt;_int_malloc+1150&gt;    je     _int_malloc+1992                &lt;_int_malloc+1992&gt;<br>──────────────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────────────────────────────────<br>&lt;Could not <span class="hljs-built_in">read</span> memory at 0x7ffffce01fe0&gt;<br>────────────────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────────────────────────────────────────────────────<br> ► 0   0x7f561fe49eb1 _int_malloc+1089<br>   1   0x7f561fe4c154 malloc+116<br>   2   0x7f56201b8b29 operator new(unsigned long)+25<br>   3   0x562e57072cca FileStream::makeSubStream(unsigned int, int, unsigned int, Object*)+40<br>   4   0x562e57091606 XRef::fetch(int, int, Object*)+260<br>   5   0x562e57068b8e Object::fetch(XRef*, Object*)+72<br>   6   0x562e5700c4f6 Dict::lookup(char*, Object*)+84<br>   7   0x562e57069843 Object::dictLookup(char*, Object*)+51<br>──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────<br>pwndbg&gt; <br></code></pre></td></tr></table></figure><p>与文中的图比对了一下调用链，确实不是一条链路。。</p><p>bt看一眼，刷了几万条类似如下的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#12301 0x0000562e57069843 in Object::dictLookup (this=0x7ffffcf42790, key=0x562e570baa64 &quot;Length&quot;, obj=0x7ffffcf42510) at Object.h:253</span><br><span class="hljs-comment">#12302 0x0000562e5706de39 in Parser::makeStream (this=0x562e599445c0, dict=0x7ffffcf42790, fileKey=0x0, encAlgorithm=cryptRC4, keyLength=0, objNum=7, objGen=0) at Parser.cc:156</span><br><span class="hljs-comment">#12303 0x0000562e5706da69 in Parser::getObj (this=0x562e599445c0, obj=0x7ffffcf42790, fileKey=0x0, encAlgorithm=cryptRC4, keyLength=0, objNum=7, objGen=0) at Parser.cc:94</span><br><span class="hljs-comment">#12304 0x0000562e570917dc in XRef::fetch (this=0x562e58c0a230, num=7, gen=0, obj=0x7ffffcf42790) at XRef.cc:823</span><br><span class="hljs-comment">#12305 0x0000562e57068b8e in Object::fetch (this=0x562e599441e8, xref=0x562e58c0a230, obj=0x7ffffcf42790) at Object.cc:106</span><br><span class="hljs-comment">#12306 0x0000562e5700c4f6 in Dict::lookup (this=0x562e59944190, key=0x562e570baa64 &quot;Length&quot;, obj=0x7ffffcf42790) at Dict.cc:76</span><br></code></pre></td></tr></table></figure><p>没事了，还是无限递归dos。。</p><p>‍</p><p>‍</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>post</title>
    <link href="/2023/11/12/post/"/>
    <url>/2023/11/12/post/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>github博客搭建</title>
    <link href="/post/github-blog-1wteoq.html"/>
    <url>/post/github-blog-1wteoq.html</url>
    
    <content type="html"><![CDATA[<h1 id="github博客搭建"><a href="#github博客搭建" class="headerlink" title="github博客搭建"></a>github博客搭建</h1><p>参考：<a href="https://www.52pojie.cn/thread-1825164-1-1.html">https://www.52pojie.cn/thread-1825164-1-1.html</a></p><h1 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h1><p>只需要注意仓库名为<span style="font-weight: bold;" data-type="strong">你的ID+.github.io</span>即可，比如ID为<span style="font-weight: bold;" data-type="strong">truth</span>，那设置仓库名就是<span style="font-weight: bold;" data-type="strong">truth.github.io</span></p><p>‍</p><h1 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h1><p>进入仓库-&gt;setting，在左侧找到<span style="font-weight: bold;" data-type="strong">Pages</span>选项卡</p><p>​<img src="http://127.0.0.1:6806/assets/image-20231111122046-hgk3tnf.png" alt="image">​</p><p>设置好Brach后刷新页面就可以看到这个：</p><p>​<img src="http://127.0.0.1:6806/assets/image-20231111122600-7kit2k3.png" alt="image">​</p><p>至此，我们可以在github域名上访问仓库了，下面就是建立和美化博客的工作了</p><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><p><a href="%5Bhttps://hexo.io/zh-cn/%5D(https://hexo.io/zh-cn/)">hexo</a>是一款博客框架, 可以通过简单的命令部署出漂亮的博客系统。</p><p>前置需要npm和nodejs, 其中nodejs需要&gt;&#x3D;14.0, 以下操作是在本地ubuntu 22.04系统中进行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装hexo</span><br>npm install hexo -g<br><br><br><span class="hljs-comment"># 初始换blog目录</span><br><span class="hljs-built_in">mkdir</span> /blog &amp;&amp; <span class="hljs-built_in">cd</span> /blog<br>hexo init<br><br><span class="hljs-comment"># 启动web服务, 默认监听4000端口</span><br>hexo server /  hexo s<br><br></code></pre></td></tr></table></figure><p>如此就可以在本地访问到一个简单的blog系统了。</p><p>‍</p><h2 id="fluid主题"><a href="#fluid主题" class="headerlink" title="fluid主题"></a>fluid主题</h2><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>是国人开发的一款 Material Design 风格的主题，安装也很简单</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装fluid</span><br><span class="hljs-built_in">cd</span> /blog<br>npm install --save hexo-theme-fluid<br><br><span class="hljs-comment"># 下载插件配置文件</span><br>wget https://raw.githubusercontent.com/fluid-dev/hexo-theme-fluid/master/_config.yml -O /blog/_config.fluid.yml<br><br><span class="hljs-comment"># 编辑全局配置文件</span><br>vim /blog/_config.yml<br> <span class="hljs-comment"># theme: fluid  # 指定主题</span><br> <span class="hljs-comment"># language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改</span><br><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p>新建about页面，验证博客是否正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new page about<br></code></pre></td></tr></table></figure><p>命令执行后会在<code>/blog/source/</code>​目录下新建一个about目录，目录下有<code>index.md</code>​的文件，为文件添加一行<code>layout: about</code>​</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: about<br>date: 2020-02-23 19:20:33<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>然后执行<code>hexo server</code>​，浏览器访问<code>ip:4000/about</code>​</p><p>​<img src="http://127.0.0.1:6806/assets/image-20231111173203-3xwtp53.png" alt="image">成功！</p><p>‍</p><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><p>hexo支持<a href="https://hexo.io/docs/one-command-deployment.html">一键部署到github</a>上</p><h3 id="安装git组件"><a href="#安装git组件" class="headerlink" title="安装git组件"></a>安装git组件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装组件</span><br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h3 id="编辑配置文件-config-yml​"><a href="#编辑配置文件-config-yml​" class="headerlink" title="编辑配置文件_config.yml​"></a>编辑配置文件<code>_config.yml</code>​</h3><p>​<img src="http://127.0.0.1:6806/assets/image-20231111185716-9r80pha.png" alt="image">​</p><h3 id="配置github连接信息"><a href="#配置github连接信息" class="headerlink" title="配置github连接信息"></a>配置github连接信息</h3><h4 id="ssh证书"><a href="#ssh证书" class="headerlink" title="ssh证书"></a>ssh证书</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span> <br>git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>配置后使用以下命令测试是否配置成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>发现不太成功，原因是<a href="https://blog.csdn.net/KevinHades/article/details/128848004">家中使用的网络代理封禁了 Github 端口 22 的连接</a>，解决办法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># vim ~/.ssh/config</span><br>Host github.com<br>    HostName ssh.github.com<br>    User git<br>    Port 443<br></code></pre></td></tr></table></figure><p>​<img src="http://127.0.0.1:6806/assets/image-20231111193944-tzqunhs.png" alt="image">​</p><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>将上述命令得到的信息写入github设置中</p><p>​<img src="http://127.0.0.1:6806/assets/image-20231111190246-1qea9n7.png" alt="image">​</p><p>执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo clean<br>hexo g <span class="hljs-comment"># 生成静态文件, 也就是public目录</span><br>hexo d<span class="hljs-comment"># 部署</span><br></code></pre></td></tr></table></figure><p>部署还需要token，在执行<code>hexo d</code>​时输入</p><p>​<img src="http://127.0.0.1:6806/assets/image-20231111190631-2eetv77.png" alt="image">​</p><h4 id="注册token"><a href="#注册token" class="headerlink" title="注册token"></a>注册token</h4><p>进入setting页面，左侧最下面找到<code>Developer settings</code>​</p><p>​<img src="http://127.0.0.1:6806/assets/image-20231111190803-vosmgbm.png" alt="image">​</p><p>然后按照要求填写即可</p><p><img src="http://127.0.0.1:6806/assets/image-20231111190845-xewy5fc.png" alt="image">​</p><p>注意需要勾选repo权限选项</p><p>​<img src="http://127.0.0.1:6806/assets/image-20231111190929-pl8h8x2.png" alt="image">​</p><p>‍</p><h2 id="成功部署"><a href="#成功部署" class="headerlink" title="成功部署"></a>成功部署</h2><p>部署成功的输出应如图所示</p><p>​<img src="http://127.0.0.1:6806/assets/image-20231111191055-93ad4sd.png" alt="image">​</p><p>‍</p><p>但是后续仍然需要输入token，这不够优雅！</p><p>修改<code>_config.yml</code>​, 将<code>https://github.com/HolyTruth/holytruth.github.io</code>​改为<code>git@github.com:HolyTruth/holytruth.github.io</code>​</p><p>​<img src="http://127.0.0.1:6806/assets/image-20231111195849-3lffwzs.png" alt="image">​</p><p>舒服了</p><p>‍</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
